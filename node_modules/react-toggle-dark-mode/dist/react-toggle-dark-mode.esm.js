import { useState, useEffect, useMemo, createElement } from 'react';
import { useSpring, animated } from 'react-spring';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var defaultProperties = {
  dark: {
    circle: {
      r: 9
    },
    mask: {
      cx: '50%',
      cy: '23%'
    },
    svg: {
      transform: 'rotate(40deg)'
    },
    lines: {
      opacity: 0
    }
  },
  light: {
    circle: {
      r: 5
    },
    mask: {
      cx: '100%',
      cy: '0%'
    },
    svg: {
      transform: 'rotate(90deg)'
    },
    lines: {
      opacity: 1
    }
  },
  springConfig: {
    mass: 4,
    tension: 250,
    friction: 35
  }
};
var REACT_TOGGLE_DARK_MODE_GLOBAL_ID = 0;
var DarkModeSwitch = function DarkModeSwitch(_ref) {
  var onChange = _ref.onChange,
      _ref$checked = _ref.checked,
      checked = _ref$checked === void 0 ? false : _ref$checked,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 24 : _ref$size,
      _ref$animationPropert = _ref.animationProperties,
      animationProperties = _ref$animationPropert === void 0 ? defaultProperties : _ref$animationPropert,
      _ref$moonColor = _ref.moonColor,
      moonColor = _ref$moonColor === void 0 ? 'white' : _ref$moonColor,
      _ref$sunColor = _ref.sunColor,
      sunColor = _ref$sunColor === void 0 ? 'black' : _ref$sunColor,
      style = _ref.style,
      rest = _objectWithoutPropertiesLoose(_ref, ["onChange", "children", "checked", "size", "animationProperties", "moonColor", "sunColor", "style"]);

  var _React$useState = useState(0),
      id = _React$useState[0],
      setId = _React$useState[1];

  useEffect(function () {
    REACT_TOGGLE_DARK_MODE_GLOBAL_ID += 1;
    setId(REACT_TOGGLE_DARK_MODE_GLOBAL_ID);
  }, [setId]);
  var properties = useMemo(function () {
    if (animationProperties !== defaultProperties) {
      return Object.assign(defaultProperties, animationProperties);
    }

    return animationProperties;
  }, [animationProperties]);
  var _properties = properties[checked ? 'dark' : 'light'],
      circle = _properties.circle,
      svg = _properties.svg,
      lines = _properties.lines,
      mask = _properties.mask;
  var svgContainerProps = useSpring(_extends({}, svg, {
    config: animationProperties.springConfig
  }));
  var centerCircleProps = useSpring(_extends({}, circle, {
    config: animationProperties.springConfig
  }));
  var maskedCircleProps = useSpring(_extends({}, mask, {
    config: animationProperties.springConfig
  }));
  var linesProps = useSpring(_extends({}, lines, {
    config: animationProperties.springConfig
  }));

  var toggle = function toggle() {
    return onChange(!checked);
  };

  var uniqueMaskId = "circle-mask-" + id;
  return createElement(animated.svg, Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    width: size,
    height: size,
    viewBox: "0 0 24 24",
    color: checked ? moonColor : sunColor,
    fill: "none",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    stroke: "currentColor",
    onClick: toggle,
    style: _extends({
      cursor: 'pointer'
    }, svgContainerProps, style)
  }, rest), createElement("mask", {
    id: uniqueMaskId
  }, createElement("rect", {
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    fill: "white"
  }), createElement(animated.circle // @ts-ignore
  , {
    // @ts-ignore
    style: maskedCircleProps,
    r: "9",
    fill: "black"
  })), createElement(animated.circle, {
    cx: "12",
    cy: "12",
    fill: checked ? moonColor : sunColor,
    // @ts-ignore
    style: centerCircleProps,
    mask: "url(#" + uniqueMaskId + ")"
  }), createElement(animated.g, {
    stroke: "currentColor",
    style: linesProps
  }, createElement("line", {
    x1: "12",
    y1: "1",
    x2: "12",
    y2: "3"
  }), createElement("line", {
    x1: "12",
    y1: "21",
    x2: "12",
    y2: "23"
  }), createElement("line", {
    x1: "4.22",
    y1: "4.22",
    x2: "5.64",
    y2: "5.64"
  }), createElement("line", {
    x1: "18.36",
    y1: "18.36",
    x2: "19.78",
    y2: "19.78"
  }), createElement("line", {
    x1: "1",
    y1: "12",
    x2: "3",
    y2: "12"
  }), createElement("line", {
    x1: "21",
    y1: "12",
    x2: "23",
    y2: "12"
  }), createElement("line", {
    x1: "4.22",
    y1: "19.78",
    x2: "5.64",
    y2: "18.36"
  }), createElement("line", {
    x1: "18.36",
    y1: "5.64",
    x2: "19.78",
    y2: "4.22"
  })));
};

export { DarkModeSwitch, defaultProperties };
//# sourceMappingURL=react-toggle-dark-mode.esm.js.map
